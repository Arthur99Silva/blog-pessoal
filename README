# 📖 **Blog Pessoal - Backend - Montreal**  

Projeto de backend de um **Blog Pessoal** desenvolvido com **Spring Boot 2.7.18** 🚀, **MySQL** 🛢️, **SonarQube** 📊 e documentado com **Swagger** 📄.  

---

## 🛠️ **Tecnologias Utilizadas**  

- ☕ **Java 17**  
- 🌱 **Spring Boot 2.7.18**  
- 🛢️ **MySQL**  
- 🔒 **Spring Security** + **JWT**  
- 📚 **Swagger** (OpenAPI)  
- 🧹 **SonarQube** (Análise de Código)  
- 📦 **Maven**  

---

## 📋 **Funcionalidades**  

### 👥 **Gerenciamento de Usuários**  
- ✅ Cadastro de novos usuários  
- 🔄 Atualização e exclusão de usuários  
- 🔑 Login com validação de e-mail e senha  
- 🪙 Geração de token JWT para autenticação  

### 📝 **Gerenciamento de Postagens**  
- ✨ Criação, atualização e exclusão de postagens  
- 📜 Listagem de todas as postagens  
- 🔍 Filtro de postagens por autor e/ou tema  

### 🎨 **Gerenciamento de Temas**  
- 🎯 Criação, atualização e exclusão de temas  
- 📋 Listagem de todos os temas  

### 🔐 **Segurança**  
- 🔒 Autenticação de usuários com JWT  
- 🚫 Controle de permissões baseado no tipo de usuário  
- 🔑 Senhas armazenadas com BCrypt  

### 🔍 **Análise de Código**  
- 📈 Integração com SonarQube para métricas de qualidade  
- 🛡️ Análise de vulnerabilidades, complexidade e cobertura de testes  

---

## 🌐 **Endpoints da API**  

| **Recurso** | **Método** | **Caminho**               | **Descrição**                     |  
|-------------|------------|---------------------------|-----------------------------------|  
| Usuário     | `POST`     | `/api/usuarios`           | Cadastrar novo usuário           |  
| Usuário     | `PUT`      | `/api/usuarios/{id}`      | Atualizar usuário                |  
| Usuário     | `DELETE`   | `/api/usuarios/{id}`      | Deletar usuário                  |  
| Usuário     | `POST`     | `/api/usuarios/login`     | Logar e gerar token              |  
| Postagem    | `POST`     | `/api/postagens`          | Criar nova postagem              |  
| Postagem    | `PUT`      | `/api/postagens/{id}`     | Atualizar postagem               |  
| Postagem    | `DELETE`   | `/api/postagens/{id}`     | Deletar postagem                 |  
| Postagem    | `GET`      | `/api/postagens`          | Listar todas postagens           |  
| Postagem    | `GET`      | `/api/postagens/filtro`   | Filtrar por autor/tema           |  
| Tema        | `POST`     | `/api/temas`              | Criar novo tema                  |  
| Tema        | `PUT`      | `/api/temas/{id}`         | Atualizar tema                   |  
| Tema        | `DELETE`   | `/api/temas/{id}`         | Deletar tema                     |  
| Tema        | `GET`      | `/api/temas`              | Listar todos os temas            |  

---

## 🛡️ **Segurança**  

- 🔒 **Autenticação baseada em tokens JWT**  
- 🚫 **Controle de acesso** para proteger endpoints  
- 🔑 **Senhas criptografadas** usando BCrypt  

---

## 🚀 **Como Rodar o Projeto**  

```bash
# Clone o repositório
git clone https://github.com/Arthur99Silva/blog-pessoal

# Navegue até o diretório do projeto
cd blog-pessoal-backend

# Configure seu banco de dados no application.properties

# Execute o projeto
mvn spring-boot:run

🌐 **A aplicação estará disponível em:**
➡️ http://localhost:8080

📄 **Documentação Swagger:**
➡️ http://localhost:8080/swagger-ui/index.html

📊 **Configuração SonarQube**
# Rodar SonarQube localmente via Docker
docker run -d --name sonarqube -p 9000:9000 sonarqube

# Para executar a análise de qualidade:
mvn clean install sonar:sonar

✨ Diferenciais do Projeto
🧹 Código limpo e bem organizado

🏗️ Arquitetura MVC e DTOs

🔒 Segurança robusta

📄 Endpoints documentados

📈 Análise contínua de qualidade com SonarQube

📝 Adendo
Essa é a versão mais funcional do projeto. Foram feitos testes usando MySQL e H2 localmente.
🔧 Integração contínua: Utilização do GitHub Actions para análise com SonarQube.

