
---

<div align="center">

# 📖 Blog Pessoal - Backend - Montreal
🚀 Projeto de Backend desenvolvido com Spring Boot, MySQL, JWT, SonarQube e documentado com Swagger! 🚀

</div>

---

## 🔥 Tecnologias Utilizadas

<div align="center">
  
| Tecnologia | Versão |
|:-----------|:-------|
| ☕ Java | 17+ |
| 🌱 Spring Boot | 2.7.18 |
| 🛢️ Banco de Dados | MySQL |
| 🔒 Segurança | Spring Security + JWT |
| 📚 Documentação | Swagger |
| 📊 Análise de Código | SonarQube |
| 📦 Gerenciamento de Dependências | Maven |

</div>

---

## 📋 Funcionalidades

- **👥 Usuários**
  - Cadastro, atualização e exclusão
  - Autenticação com JWT

- **📝 Postagens**
  - Criar, editar, excluir e listar postagens
  - Filtro por autor e/ou tema

- **🎨 Temas**
  - Gerenciar temas (CRUD)

- **🔐 Segurança**
  - Criptografia de senha com BCrypt
  - Controle de permissões por tipo de usuário

- **📊 Qualidade**
  - Análise contínua de código com SonarQube

---

## 🚀 Como Executar o Projeto

```bash
# 1. Clone o repositório
git clone https://github.com/seu-usuario/blog-pessoal-backend.git

# 2. Acesse o diretório do projeto
cd blog-pessoal-backend

# 3. Configure seu banco de dados em application.properties

# 4. Execute o projeto
mvn spring-boot:run
```

📍 Acesse a aplicação:  
`http://localhost:8080`

📍 Documentação da API (Swagger UI):  
`http://localhost:8080/swagger-ui/index.html`

---

## 🌐 Principais Endpoints

| Funcionalidade | Método | Endpoint | Descrição |
|:---------------|:-------|:---------|:----------|
| Cadastro de Usuário | `POST` | `/api/usuarios` | Cria novo usuário |
| Login | `POST` | `/api/usuarios/login` | Gera token JWT |
| Atualizar Usuário | `PUT` | `/api/usuarios/{id}` | Atualiza dados do usuário |
| Criar Postagem | `POST` | `/api/postagens` | Nova postagem |
| Listar Postagens | `GET` | `/api/postagens` | Lista todas postagens |
| Filtrar Postagens | `GET` | `/api/postagens/filtro` | Filtro por autor/tema |
| Gerenciar Tema | `POST/PUT/DELETE/GET` | `/api/temas` | CRUD de temas |

---

## 🛡️ Segurança

- Tokens **JWT** para autenticação 🔑
- Senhas seguras com **BCrypt**
- Endpoints protegidos por perfis de usuário 🔒

---

## 📊 Configuração do SonarQube

```bash
# Execute o container SonarQube
docker run -d --name sonarqube -p 9000:9000 sonarqube
```

Crie o arquivo `sonar-project.properties`:

```properties
sonar.projectKey=blog-pessoal
sonar.projectName=Blog Pessoal Backend
sonar.host.url=http://localhost:9000
sonar.login=<seu_token>
sonar.language=java
sonar.sourceEncoding=UTF-8
sonar.sources=src/main/java
sonar.tests=src/test/java
sonar.java.binaries=target/classes
```

Para rodar a análise:

```bash
mvn clean install sonar:sonar
```

---

## ✨ Diferenciais do Projeto

- 🧹 **Código limpo** e organizado
- 📚 **Documentação completa** da API
- 🔒 **Segurança robusta** com JWT e BCrypt
- 📈 **Análise de qualidade contínua** com SonarQube
- 🏛️ **Arquitetura em camadas (MVC)**

---

## ✨ Adendos:
Essa é a versão mais funcional do projeto. Foram feitos os testes usando o bando de dados MySQL localmente, assim como o H2.
Tentei implemengar o SonnarQbe de varias maneiras, até certa parte estava funcional, mas encontrei um bug/erro onde toda vez em que acessava a página, sendo assim é possivel entrar no SonnarQube e realizar testes, porém usando o Github Actions o SonnarQube não se conectava, apenas apresentando o
bug anteriormente comentado.
eu tinha que resetar a senha impedindo de entrar para fazer os testes, criei um branch apenas para realizar os testes.
Quanto ao Swagger, funcionou, porém quebrou um pouco meu código deixando com alguns bugs na hora de realizar ações do requisitos funcionais, por conta do tempo não consegui identificar o problema.
Nessa versão tentei deixar tudo bem comentado e obedecendo boas práticas de programação. Em meus testes todas a funções funcionaram perfeitamente.
Qualquer dúvida estou a disposição.

Observação: Existem duas branchs, a main, que onde esta o projeto com os controllers adaptados para o SWAGGER, com os requisitos funcionais em funcionamento 100%, e a branch Testes, onde o projeto esta completamente funcional, usando o H2 e os banco de dados local, porém com parte do SonnarQube funcionando.

<div align="center">




</div>

---